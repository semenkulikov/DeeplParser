Introduction
Welcome to our book on hacking. We believe there aren’t too many books
quite like this one. Yes, there are countless books out there about hacking (and
information security, penetration testing, and so forth), but how many of those
books give you everything that you need to start hacking your first computer
systems, in a safe way, right from the get-go? Three labs are provided with this
book—hacking sandboxes if you will—that you can run on your existing laptop
or desktop computer. By using these labs, you will be able to try out various tools
and techniques—the same ones as those used by malicious hackers today—without
risk either to yourself or to the outside world. We will show you exactly how to
hack these systems using open source tools that can be downloaded for free.
You do not need to purchase anything else to try all of the practical exercises
that we have included.
This book comes to you from the people behind Hacker House, a company
specializing in online cybersecurity training and penetration testing services.
Since its humble beginnings in east London in 2014, one of the reoccurring
themes of Hacker House gatherings (we used to do a lot of meetups and events)
has been how to properly identify talent and endorse cyber skills. We wanted
to understand how we could capture the rebellious spirit of hacking—the one
that causes hackers to question authority and the ways in which systems work.
It was Jennifer Arcuri who first set about creating a company that could harness
the potential of computer hacking and make it a usable asset for companies
looking to bolster security, later joined by co-founder Matthew Hickey, who
created content and technical resources to facilitate the Hacker House mission.
It’s a rare day where there isn’t some big “hack” that costs a company millions
of dollars in losses or where identities are stolen or some other data theft takes
place. One of the biggest reasons why companies are failing at security is because
xx
Introduction xxi
they don’t have the right cyber skills on their IT teams. Even if they hire an
outside consultant, there is still no guarantee that the missing patches and
security flaws that have been pointed out have now been resolved and that the
company’s data is indeed secure and protected from further attack.
We wrote this book with a vision toward a better way of developing cyber
skills. Training consultants to become well versed in theory hasn’t actually
helped the landscape of attacks—we are still thousands of jobs short for what
is an industry that is growing faster than we can keep up with it.
The content of this book started life as a training course, comprising 12
modules
taught over 4 days in a classroom environment. That course can now
be accessed online by anyone with an Internet connection from anywhere in
the world. This book takes the hacking techniques and tools covered in that
course and presents them as a written guide, with an emphasis on practical
skills—that is, actually trying things out. We have taken the numerous labs
used in our course and given you everything that you need in three labs. The
same tools used by students in the course are also available to you. Unlike the
training course, however, this book assumes less prior knowledge and gives
you a deeper insight into the background theory of each technology that we
hack. Instead of 12 modules, there are 15 chapters that closely follow the format
of our tried-and-tested training course, but with additional content, including
a chapter dedicated to report writing, a chapter for executives, and a chapter
explaining how to configure your own computer system for the purpose of
hacking.
The concepts taught in this book explain the mindset used by adversaries,
the tools used, and the steps taken when attempting to breach a company
and steal data. This knowledge could be seen as dual use: improving better
defenders with the skills needed to stop adversaries yet also teaching the skills
used by malicious adversaries. We won’t teach you how not to get caught, but
everything in this book has been designed to showcase how attackers target
networks and access information. Many of the attacks demonstrated are based
on real systems that our team has breached and encompass a broad spectrum
of information security problems.
Our hope is that after learning about a different way of approaching computer
security, you will contribute to the next generation of solutions within industry.
We seek not only to teach and train you to be ready for employment but also to
instill techniques that will shape the way that new tools and exploits are used
to protect companies’ digital assets.
Information security is an industry with many fun and exciting opportunities,
and we encourage all those who want to try something that is relevant to our
society to explore this book. Whatever your job in technology, isn’t it time you
learned how to protect yourself against modern cyber threats?
xxii Introduction
Who Should Read This Book
The book is aimed not only at those seeking an introduction to the world of
ethical hacking and penetration testing, but for every single network or system
administrator and Chief Information Security Officer (CISO) out there who is
ready to take security seriously. We believe that to comprehend fully how a company
will be targeted and breached, one must think and act like the assailant. Some
readers will be happy reading through this book and gaining unique insight
into the mind of an adversary. For those who want to take it further, there are
practical exercises throughout. Those who fully master the content will have
learned the skills required to conduct penetration tests, either within the company
for which they work or for external clients, and find critical security flaws.
Hands on Hacking is essential reading for anyone who has recently taken on
information security responsibilities in their workplace. Readers may not yet have
started their career in IT, but this book will give them a thorough understanding
of issues that affect any computer user. Readers will need a healthy interest in
computing to get the most from the content, but little practical experience is
actually required. We will delve into the various technologies—the protocols
that make up the Internet, the World Wide Web, and internal networks—before
looking at how to hack them.
We focus on Linux in this book, but even if you have little knowledge or experience
with this operating system, we’ll hold your hand throughout, and soon
you’ll become competent with the Linux command-line interface. We will even
show you how to install Linux on your current computer without affecting your
existing operating system—whether that be Windows or macOS.
What You Will Learn
You will learn how to approach a target organization from the point of view
of a penetration tester or ethical hacker using the same skills and techniques
that a malicious hacker would use. Your journey will begin in the realm of open
source intelligence gathering, moving on to the external network infrastructure
of a typical organization. We’ll look for flaws and weaknesses and eventually
break into the company’s internal network through a Virtual Private Network
(VPN) server, explaining everything as we go. Those who don’t necessarily
want to carry out the attacks themselves will witness exactly how information
is gathered about their company and how attackers probe for holes and weaknesses
before hacking in.
Once we’ve exposed the internal infrastructure, we’ll find machines running
Linux, UNIX, and Windows—each with their own flaws.
Introduction xxiii
Using a range of tools, we’ll exploit various vulnerabilities. We will also look
at how those tools work and what they’re doing under the hood so that readers
can understand how to exploit vulnerabilities manually.
We’ll gain access to a number of different computer systems and ultimately
obtain Administrator permissions, allowing us to take over compromised systems
completely. Along the way, we’ll be collecting loot from the servers we
visit. Among these will be a number of hashed passwords, which you’ll learn
how to crack towards the last chapter!
Finally, we’ll show readers how they can formalize the entire process covered
by writing reports of their findings that are suitable for company executives,
clients, or colleagues—regardless of their technical understanding—and how
an engagement with an external client is structured.
Readers will be able to practice many of the skills they come across using
labs—sandbox environments designed for safe, legal hacking. These labs are
made freely available to those purchasing the book. For those who want to
understand what an attacker can do to their company, exploits are described
in a way that makes sense and will help you realize the damage a missing
patch can cause.
How This Book Is Organized
The book begins with a chapter that addresses the needs and concerns of company
executives, followed by an important look at the legal and ethical aspects of
computer hacking. Chapter 3, “Building Your Hack Box,” is the first practical
chapter. In it, we show you how to set your computer up for carrying out the
activities in the rest of the book. Chapter 4, “Open Source Intelligence Gathering,”
details the passive, intelligence-gathering process undertaken before actively
hacking into an organization’s network. Chapters 5–13 address specific areas of
a typical organization’s infrastructure and introduce new tools and techniques
as they are required. Chapter 14, “Passwords,” focuses solely on the storage of
passwords and how to retrieve them, with Chapter 15, “Writing Reports,” the
final chapter, looking at how to write up the results of your hacking so that
problems can be fixed.
Chapter 1: Hacking a Business Case Translating computer security problems
to businesses and understanding their mission objectives is a crucial
element of how to use hacking effectively. This chapter is all about
board rooms, risk, and understanding how to communicate information
from the trenches of the computer networks back to those responsible for
business decisions.
Chapter 2: Hacking Ethically and Legally We provide a brief introduction
to the legal and ethical aspects of hacking. Not every hacker is a
xxiv Introduction
criminal—quite the contrary. We’ll provide some pointers on staying on
the right side of the law and how to conduct your hacking professionally.
Chapter 3: Building You Hack Box It’s time to get practical. In this chapter,
you will learn how to set up your own computer system step-by-step so
that it is ready to start hacking, without hindering you from using it for
your everyday work and leisure activities. We’ll also show you how to set
up your first lab in a virtual machine (VM) so that you have a target that
can safely be explored and exploited.
Chapter 4: Open Source Intelligence Gathering Before you start hacking
computer systems, you will learn how to gather information passively
about your target. We use real-world examples in this chapter, as we are
searching for and using publicly available information, but perhaps differently
than what you’ve witnessed before.
Chapter 5: The Domain Name System The Domain Name System (DNS)
is something on which we all rely, and yet many of us have little insight
into how it works. In this chapter, you’ll learn exactly what DNS is and
how organizations, as well as individuals, rely on it. Then you’ll learn
some practical techniques for gathering information and searching for
vulnerabilities before eventually exploiting them. We’ll introduce some
important tools in this chapter, including Nmap and Metasploit, which
is crucial reading for understanding the rest of the book.
Chapter 6: Electronic Mail Through this chapter, you’ll understand how
email servers work and how to hack them. This chapter covers e-mail
protocol basics, mail relays, mailboxes, web mail and all the tricks of the
trade that can be used to compromise email systems. We walk you through
the process of hacking into e-mail servers.
Chapter 7: The World Wide Web of Vulnerabilities It could be argued
that the World Wide Web, invented by Tim Berners Lee in 1990, is now
fundamental to our existence. You will learn how it is based on aging
protocols and how to hack the infrastructure that supports your favorite
websites and web applications.
Chapter 8: Virtual Private Networks VPNs are an increasingly popular
solution for both personal and corporate use, with countless employees
logging into their company’s internal network remotely using this technology.
We’ll pick apart some of the ways in which common VPNs work
and, of course, how to approach them like a hacker.
Chapter 9: Files and File Sharing Up to this point, you will have looked
at a typical organization from an external perspective. Now it’s time to
step inside the internal perimeter and see what resides on the internal
network, starting with file servers. In this chapter, we’ll cover the theory
necessary to get a better handle on the Linux file system and how to use
files and file sharing technology to get a foothold in systems.
Introduction xxv
Chapter 10: UNIX Switching from Linux, which up to this point has been
our focus, in this chapter we take a look at a UNIX operating system.
We’ll show you some of the quirks of these operating systems, including
vulnerabilities for you to explore and exploit.
Chapter 11: Databases In this chapter, we start by showing you how to perform
basic database administration, using the Structured Query Language
(SQL), before demonstrating attacks that utilize this and other features of
databases. This chapter serves as a crucial basis for understanding how
high-profile data leaks actually work and how to exploit them, which we
will continue to explain in the subsequent chapter.
Chapter 12: Web Applications Web applications are a huge part of everyday
business for almost every organization—and they’re also a huge target.
We cover the essentials of web applications in this chapter, focusing on the
most dangerous types of attacks that continue to plague small and huge
companies across the globe. You’ll find that everything you’ve learned so
far really comes together in this introduction to web application hacking.
Chapter 13: Microsoft Windows Thus far, you’ve seen the myriad of flaws
in the Linux and UNIX operating systems. Now it’s time to shine the
spotlight on Microsoft’s Windows operating system. The focus is Windows
Server, which is the technology powering countless organizations’
IT infrastructure. Like Linux, Windows Server can host DNS, email, web,
and file sharing services. We’ll help you transfer your Linux and UNIX
hacking skills over to Windows in this part of the book.
Chapter 14: Passwords Throughout the book, we have referenced passwords
and their hashes. In this chapter, you have the chance to understand how
passwords are hashed and the inherent problems in many algorithms that
people rely on every day for securing their data. We’ll give you guidelines
on cracking password hashes—that is, recovering plaintext passwords
from the data you’ve accessed in the labs you’ve been hacking thus far.
Chapter 15: Writing Reports You won’t get far as an ethical hacker or penetration
tester if you are unable to convey your findings to your client,
colleagues, or superiors. Writing a penetration test report utilizes a whole
new skill set, and we’ll show you what you need to do to communicate
effectively using a sample report as a guideline.
Hardware and Software Requirements
To follow along with the exercises in this book, you will need either a laptop or
a desktop computer running Windows, macOS, or a mainstream Linux distribution
with enough hard drive or solid-state drive space for the software and
xxvi Introduction
tools demonstrated within the chapters. You’ll also need enough main memory
(RAM) to run VMs and an Internet connection for downloading everything
you will need. We cover hardware and software requirements in Chapter 3,
“Building Your Hack Box,” and walk you through all of the steps required to
get hacking. Here are the minimum requirements:
■■A modern Intel or AMD CPU (with Streaming SIMD Extensions 2 [SSE2],
which almost all processors have)
■■ 4 GB of RAM
■■ 50–100 GB of hard disk drive (HDD) or solid-state drive (SSD) capacity
■■ Internet access for downloading software and running certain demonstrations
How to Use This Book
This book was designed to be read through from start to finish, with practical
activities in almost every chapter that you can work through as you go. The
book can be read without carrying out any of the activities, and it will still make
sense. Or perhaps you are the type of reader who likes to read content once first
and then go back to try the practical elements? Either way, to get the most out
of Hands on Hacking, you will want to attempt the practical hacking exercises,
and we’ll show you exactly how to do this.
Even though most chapters address a particular area of an organization’s network
infrastructure, skipping to the chapter in which you are most interested
may give you a headache. This is because we introduce many concepts early on
in the book that you will need to use later and that apply across different areas
of hacking. In later chapters, you will find only small reminders to previously
introduced tools and techniques, with ways in which you can apply them in a
new setting.
To carry out the practical activities, which start in Chapter 3, “Building Your
Hack Box,” you will need to ensure that you have access to the downloadable
content found at www.hackerhousebook.com. You will need to use the username
“student” and password “student” to access the /files content. (The
only purpose of this authentication is to stop search engines from flagging our
website as malicious. There’s a lot of potentially malicious code in the files that
you’ll learn how to use responsibly.) This link will allow you to download a single
files.tgz compressed archive containing a large number of tools. The website
also hosts three labs: the mail server and UNIX lab from Hacker House,
along with a purpose-built lab created exclusively for this book that contains
numerous labs in a single download. The content is mirrored on Wiley’s website,
at www.wiley.com/go/handsonhacking. The details of setting up your own
Introduction xxvii
computer
to carry out the practical activities are covered in Chapter 3, “Building
Your Hack Box,” but you should read through Chapter 1 and Chapter 2 first.
The other software and tools that we reference are generally open source, are
freely available, and can be downloaded from the relevant developer’s website.
How to Contact the Authors
You can contact the book authors via info@hacker.house. If you spot any errors
or omissions or you have any feedback in general, we’d love to hear from you.
If you’re interested in our online training, which complements the contents
of this book, head to hacker.house/training. Any updates and labs accompanying
this book will be posted at www.hackerhousebook.com. You can learn
more about Hacker House and our services on our home page hacker.house.
CHAPTER
1
1
If you’re communicating with a business owner, chief executive officer (CEO),
chief information security officer (CISO), or just someone who needs to make a
case to upper management on why hacking is beneficial to companies, then this
chapter is for you. The chapter is not packed with practical hacking exercises
like the remaining chapters are; rather, it focuses on the reasons why companies
need hackers. We explain why we believe that the best route to improving an
organization’s cybersecurity is for you, your team, and your employer, to adopt
a purple team mentality and begin thinking like malicious hackers. The purple
team way of thinking is the amalgamation of traditional blue and red teams—the
defenders and the attackers.
If you know the enemy and know yourself, you need not fear the results
of a hundred battles. If you know yourself but not the enemy, for every
victory gained you will also suffer a defeat. If you know neither the enemy
nor yourself, you will succumb in every battle.
Sun Tzu, The Art of War
To be a CISO is to lead an army. To be effective, that army needs to know
itself and know its enemy. In other words, you need a team trained to think like
hackers. You need a team that proactively works to identify all the ways that
the enemy could attack and then build stronger infrastructures—from patching
Hacking a Business Case
2 Chapter 1 ■ Hacking a Business Case
software vulnerabilities to creating security policies and cultures. Businesses
need hackers, and that is the subject and focus of this chapter.
All Computers Are Broken
At Hacker House, we have a saying: “All computers are broken.” A hacker does
not “break” a computer, network, or software; rather, the computer was already
broken to begin with, and the hacker shows you just how broken it is. Modern-day
computing is built on a foundation of trust and naivety that predates modern
commerce. Security simply wasn’t there by design in the beginning, and (almost)
everything since then had to be built on this unstable base.
Being accountable for the security of information within any organization
today is a bold task. That job typically resides with an organization’s CISO. The
CISO is responsible for ensuring that an organization’s IT infrastructure and
data (including digital and nondigital data, such as paper records) are adequately
protected from disaster, whether it be a system failure, natural phenomena, or
malicious cyberattack. In smaller organizations, the official job title of CISO may
not exist, in which case the business owner or CEO will probably take on this
role. It is a huge responsibility to keep company assets safe from the relentless,
invisible, and ubiquitous attacks that constitute cybercrime. If something goes
wrong (which sadly it so often does), it can go badly wrong. A data breach can
result in grave financial and reputational losses for businesses, and CISOs can
lose their career or business—all from the click of a mouse and a few keystrokes
of a tech-savvy attacker.
CISOs practice information security, often shortened to infosec, a term that
is used to describe an entire industry sector. Infosec means protecting data
and preventing access to computer systems from unauthorized entities.
Infosec involves balancing the usability of computer systems and their
software with security. A completely secure system, if such a thing could
exist, would likely be totally unusable for most businesses and users. For
example, imagine a computer unplugged from the Internet, locked in a
vault, and buried beneath the surface of the earth in a faraday cage to prevent
external interaction.
Since organizations must open themselves up and allow the public (and
employees) to connect to their services, a completely secure system isn’t a
possibility except for extreme edge cases. Let’s look at a few of the challenges
that a CISO may face.
In 2019, there were many high-profile cases of large organizations getting
hacked.
■■Whatsapp, an instant messaging application, was found to be vulnerable
to an attack that would allow the attacker to take control of a victim’s
Chapter 1 ■ Hacking a Business Case 3
smartphone and negate the effects of Whatsapp’s end-to-end encryption.
This encryption allowed users to send private messages to one another
(Whatsapp’s greatest selling point).
■■ Security company Trend Micro had customer records stolen by its own
employee. Those records were used to make scam calls to customers to
defraud them. This case highlights the importance of internal security
controls and not just the protection of public-facing services.
■■ Credit card provider Capital One had the personal details of more than
100 million customers stolen by a malicious hacker who supposedly
exploited a misconfigured web application firewall—a technology designed
to protect websites from attack! The stolen records consisted of names,
physical addresses, Social Security numbers, and bank details. After the
news hit in July 2019, Capital One projected attack-related costs of up to
$150 million.
■■ In December 2019, UK company Travelex hit the headlines when it was
affected by a ransomware attack. In a ransomware attack, attackers
effectively steal data and demand a ransom for its return. The ransom
in this case was $6 million, although it appears that Travelex was able
to recover its data without paying the criminals. This cannot be said of
all organizations and individuals that have been affected by
ransomware.
These are just a tiny fraction of the breaches that take place all the time. If
you think the frequency and impact of these hacks is scary, then consider that
this situation is only projected to become worse. The number of potential vulnerabilities
within companies and the volume of data, as well as our legal and
moral responsibilities to that data, are increasing at exponential rates.
Moreover, these threats are increasing much faster than traditional infosec’s
ability to handle them, with its reliance on expensive external penetration testers—
that is, those with specialized skills designed to find and report an organization’s
computer security vulnerabilities. Consequently, CISOs find themselves in an
almost impossible position—trying to protect more with diminishing resources.
Something has to change.
Thankfully, it has. You’re about to discover how purple teaming—the act of
developing highly skilled internal security teams and strong corporate security
cultures—is not only possible but also practical, simple, and cost-effective.
Purple teaming is the modern and efficient approach to corporate cybersecurity,
and it is desperately needed in every business, whether small corporate outfits or
multinational conglomerates. To put it another way, purple teams are essential
for every company as they provide you with insight to how attackers operate
and guidance on how to prevent attacks from succeeding.
4 Chapter 1 ■ Hacking a Business Case
The Stakes
Before we dive in to find out what purple teaming is and how it works, let’s
take a closer look at the hazardous context in which most CISOs and businesses
currently operate.
What’s Stolen and Why It’s Valuable
Data is valuable. Data can be used to manipulate perceptions, transfer exorbitant
amounts of money, win elections, take down competitors, get executives
hired or fired, hold people and assets hostage, perhaps even start wars . . . the
list goes on and on. To put it briefly, data is the new wealth generation for businesses.
It’s a big business.
Unfortunately, many companies (except the CIOs and CISOs in them, of
course) do not realize the value of their data. “Why would anyone want to
steal our photos or the login details used by receptionists?” Does this sound
familiar? A better question to ask today is, “Why wouldn’t they want to steal this
data?” It really is best not to presume which data is or isn’t valuable—it all is
to an attacker. Malicious hackers value data because it can easily be traded on
the black market for a quick buck if need be. Often, that’s the only motivation
an individual or group needs to steal data.
Data is defined as information in raw format that can be manipulated into
usable information. Data is everywhere: payroll, sales figures, bank and credit
card details, personal identification, emails, analytics, passwords, surveillance,
statistics, government files, medical records, scientific reports, legal documents,
subscription information, competitor websites, financial records . . . the list goes
on, and on, and on. Of course, the “smarter” we get (smartphones, smartwatches,
virtual assistants, smart plugs, smart thermostats, smart refrigerators, video
doorbells, electric cars, smart door locks . . . again, it’s a long list), the more data
there is, or rather, the more unsecured data there is.
The Internet of Vulnerable Things
Unfortunately, as smart as devices have become, when it comes to security, the
majority are not smart at all. Whether it’s because manufacturers are unaware
of or overwhelmed by the risks, or simply because they choose to ignore them
(security investment impacts profit margins after all), millions of smart devices
are being churned out every year absent of effective built-in security. These
devices—billions of them—are used in homes and businesses every single day,
and most of them put our valuable data at risk.
The reality, which CISOs know all too well, is that we do not have an Internet
of Things (IoT)—we have an “Internet of Vulnerable Things.” CISOs now have to
Chapter 1 ■ Hacking a Business Case 5
think twice before agreeing to the installation of smart thermostats throughout
the company’s property portfolio or whether board members should be wearing
smartwatches (and that’s if anyone even thinks to run those decisions by
them first).
To top it off, companies are becoming increasingly accountable in a legal sense
for the data that they hold and process (and rightfully so). For example, the
European Union’s General Data Protection Regulation (GDPR) legislation means
that companies need to implement the same level of protection for data, such as
an individual’s IP address or cookie data, as they do for names and addresses.
Some of the key privacy and data protection requirements of GDPR include
obtaining consent from subjects for data processing, anonymizing collected
data to protect privacy, providing data breach notifications, safely handling the
transfer of data across borders, and requiring certain companies to appoint a
data protection officer to oversee GDPR compliance.
Blue, Red, and Purple Teams
Traditional infosec is based on the premise of blue teaming and red teaming
(although not all companies have, or necessarily require, either in their strictest
form). For the sake of clarity, let’s quickly summarize what that looks like.
Blue Teams
Blue teams are the “white-hat” defenders—those who work on a systems-oriented
approach, performing analyses of information systems to ensure security, identify
security flaws, verify the effectiveness of security measures, and make sure
that all security measures continue to be effective after implementation. Blue
team members typically comprise IT help-desk staff, system patchers, backup
and restore staff, basic security tool managers, and so on. Data centers of larger
companies may hire network administrators to watch over their network and
to respond after intrusions. Ideally, a blue team will be able to see whether
an attack is taking place and take steps to mitigate the attack before any real
damage is done.
Red Teams
When it comes to more in-depth security, most CISOs have had little choice
but to bring in red teams, which are independent groups of professionals who
challenge an organization to improve its effectiveness by assuming the role of
adversary (attacker). Red teams use the same tools and techniques that real,
malicious hackers use. Attack campaigns can last several weeks to months.
6 Chapter 1 ■ Hacking a Business Case
There will usually be a specific objective of the operation, such as the “theft”
of valuable data from the company. At the end of the engagement, the red team
should work with their client’s blue team to address the issues found and suggest
remedial action.
Red teams should not be confused with penetration testers. A penetration tester
performs a security assessment of an organization’s computer network and is
the subject of this book. This security assessment will typically last several days.
At the end, a report is issued that points out security flaws and vulnerabilities.
A penetration tester will often work alone and is not expected to perform the
same in-depth attack as a red team would. That being said, penetration testers
should adopt the same kinds of methods used by a traditional red team and
use the same techniques that malicious hackers would use.
NOTE Not every company is able to hire active threat hunters to watch over the
network (blue team), nor does every company require tactical, targeted red teaming.
The latter is essential for companies that process numerous financial transactions per
second, are constantly under attack, and where even an information disclosure from a
log file can expose the movement of money, such as banks and gambling companies.
Some companies have their own internal red team and/or penetration testers as well,
and these companies frequently do not need to outsource these roles except for compliance
purposes.
Large private businesses (especially those heavily invested as government/
defense contractors, such as IBM and SAIC) and U.S. government agencies
(such as the CIA) have long used red teams. Smaller organizations will use a
penetration tester, often on an annual basis, to give them an indication of their
security posture.
Once the engagement is over, it’s up to the organization’s blue team or other
skilled external consultants to take action on the suggestions of the red team or
those specified in the penetration tester’s report. At this point, some problems may
arise. Once upon a time, this disjointed approach to infosec may have been OK,
getting the job done to a functioning degree. Now, however, it rarely succeeds.
One of the biggest problems involves taking action on the red team’s recommendations
or a penetration tester’s reports. This step often isn’t completed (or
even started) due to the reasons described next, and thus the reports may then
become little more than a box-checking exercise to appease shareholders. The
reasons why this may be the case include the following:
Inadequate training: Blue teams often don’t know how to act upon the reports
due to a lack of skills outside of common tasks such as reconfiguring firewalls,
updating software, and changing passwords.
Chapter 1 ■ Hacking a Business Case 7
Lack of resources: Many corporations say that their cybersecurity teams are
understaffed, and since a huge amount of the budget is spent on penetration
testing, there is often little scope for bringing in more resources.
Limited time: It is difficult for companies to redirect staff resources to go
through long technical reports and patch vulnerabilities, especially when
blue teams are often fighting fires on several fronts.
Lack of incentives: It can be challenging for CISOs to motivate staff to go
through a lengthy penetration test report, created by someone else (who
was likely paid significantly more money), and patch vulnerabilities.
Sometimes, when red teams or penetration testers (whether internal or external)
point out flaws, blue team members get defensive; finger-pointing, animosity,
and internal chaos ensue. Subsequently, CISOs may find themselves dealing
with HR issues as much as they do technology.
Fundamentally, the gap between traditional blue and red teams, attackers
and defenders, is too wide. CISOs need people on board who understand the
tactics, techniques, and procedures used by cyber-enabled attackers and how to
build better defenses against them. CISOs need an internal team that is able
to dig out potential problems and patch them proactively, whether that’s a case
of updating the operating system on workstations or catching wind of an idea
to install Internet-connected thermostats throughout the company’s buildings
and be able to assess whether that would, or wouldn’t, be a good idea.
Purple Teams
When considering the security of their data and computer systems, a small
business owner may be thinking something along these lines:
“I need effective and inexpensive cybersecurity to protect my company’s data so
that I can relax and put my efforts into growing my business.”
Both of these scenarios are possible by adopting the purple team mentality.
Purple teaming is the simple and obvious solution to the explosive growth in
breaches and data loss. In purple teaming, a team of experts takes on the role of
both the red team and the blue team with the intention of anticipating attacks
and addressing vulnerabilities and weaknesses before they can be exploited by
malicious third parties. Purple teams are responsible for a company’s overall
security posture. They are proactively engaged with understanding and evaluating
risk through technical simulations. They know what a company’s digital
assets (the true value of every organization) are, where they are stored, and how
to protect them by building better networks and systems.
8 Chapter 1 ■ Hacking a Business Case
This approach enables traditional blue team IT staff to understand how underlying
vulnerabilities are exploited by hackers (and/or red teams). Purple teams
are better trained to “turn on the human firewall” by being better educated in the
common methods of social engineering used by cybercriminals and malicious
insiders, such as phishing, a technique whereby emails are sent to employees
to have them click a malicious link. There are many variations of this type of
attack, but all social engineering attacks rely on first exploiting the human factor
rather than the computer system itself.
NOTE Phishing is the process of luring a victim into providing sensitive
information, such as their username and password or credit card details, usually
through a fake website designed to look like a legitimate site. Email and instant messaging
are commonly used by malicious hackers as a means to provide the victim with
a link to a fraudulent site that they control. There are variations on phishing, such as
spear phishing, which tends to target an individual whose behaviors are researched in
advance, and whaling, which targets CEOs and other executives with a view to having
them use their privileged position to process a financial transaction that appears legitimate
quickly but is in fact fraudulent.
The best way to close the skills gap for any red or blue team is to merge them
into a single purple team where all members gain the necessary skills and
understanding in information technology (IT), software development lifecycles,
social engineering, penetration testing, vulnerability management, patching,
system configuration, and hardening to standards such as the Security Technical
Implementation Guides (STIGs) from www.nist.gov. A purple team is always in
“ready-to-be-breached” business mode.
This is absolutely necessary. If we are to implement truly effective security
practices, companies must empower their own people to understand
cybersecurity risks. It’s as simple as that. This shift toward making security an
operational core of the business means that CISOs are no longer looking—and
spending—outside of the company.
With a purple team in place, there is no longer any need to pay external consultants
to run a prolonged penetration exercise against a company’s infrastructure,
which could cost tens to hundreds of thousands of dollars. Companies can
get the same results from their purple team, while not having to ask the chief
financial officer (CFO) for funding. There will no longer be delays waiting for
reports that may or may not be understood and implemented anyway. There
will no longer be clocks ticking on the careers of CISOs. Instead, time, money,
and energy are focused on innovation and growth.
For a purple team to work, everyone needs to have an understanding—a practical
understanding—of what malicious hackers can do to a network. Everyone
also needs to have an understanding of how internal systems—the hardware,
Chapter 1 ■ Hacking a Business Case 9
operating systems, off-the shelf software, and bespoke software—work and
how they can be fixed and patched to mitigate risks. We are not saying that the
whole team must be experts in all of these areas, but they must know enough
about each other team member’s areas of expertise to be able to work together
effectively and to empathize with one another.
NOTE A Black Team is an extended form of a Red Team that provides a
combination of both cyber enabled and physically present attacker simulations,
sometimes referred to as a close access team. Black teams must not only take into
account cyber defenses such as firewalls, intrusion detection systems, and anti-virus,
but may also need to assess CCTV, alarm systems, door entry systems, and wireless
technologies alongside any public and private security support in place. Black Teams
are very rarely required by most commercial entities (if they are ever needed at all),
and their use is typically limited to critical infrastructure and secured facilities that
have a high risk of intrusion by cyber-enabled and physically present adversaries.
Hacking is Part of Your Company’s Immune System
To make the shift into effective infosec, you have to rethink the way that you
approach security. This starts by throwing out all of the fear-based brainwashing
that society has told us about hacking—the guys in hoodies, dark basements,
and criminality. Here’s why this is critical: the real answer to effective cybersecurity
is for corporations to learn how to be hackers—that is, to be able to do
what the hackers do.
It makes sense. To build great defenses, you need to know what’s coming at
you. No one would go to war without doing recon on their adversaries, analyzing
their own weaknesses, and then putting measures in place to strengthen them.
However, this is what companies do all the time—they fail to look carefully at
their own weaknesses. For organizations to become more resilient to cyberattack,
they have to think like hackers, period.
One way that we often approach this subject is to ask clients and students,
“Have you ever broken into your own home?” Of course, most have (usually
they’ve lost their keys and had to climb in through the bathroom window at
least once). It is a great way to illustrate the necessity of thinking like a hacker—
you’ve tried to break into your own home, so why have you not tried to break
into your own digital systems? You might start by mapping out the assets you
own, thinking about potential points of entry, visualizing where and when
people are in it, and so on.
We can think of companies in the same way. After all, this is how attackers
think. The benefit of taking things apart and breaking things down to the
10 Chapter 1 ■ Hacking a Business Case
component
level is that we can then reverse-engineer effective security solutions
and implement attacks that help us better understand how to protect our assets.
Therefore, you are now invited to replace your old ideas about hacking with
this one: Hackers are persistent, stealthy, targeted, and data driven. Hacking is
the pursuit of knowledge.
To make companies more secure, we need to establish new cybersecurity
habits throughout the organization. This is essential because most small and
medium-sized enterprises don’t survive cybersecurity attacks, whether or not
that’s because of failure to encrypt software, update files, allowing shared credentials,
ensuring that employees do not click on suspicious links, and so on. In
other words, employees are one of the biggest areas of vulnerability inside organizations.
Employee errors are often the result of not following procedure, lacking
expertise, and interacting with web applications and websites every day. It
follows, then, that an empowered security posture relies heavily on everyone
within an organization being educated and committed to security. Research
from Protiviti’s 2017 Security and Privacy Best Security Practices report
(www.protiviti.com/US-en/insights/it-security-survey) confirms this. It
details the top four key findings as follows:
■■Having an engaged board and security policies. (This makes a huge
difference.)
■■ Enhancing data classification and management (data mapping and understanding
where all your assets are located).
■■ Security effectiveness hinges on policies as well as people.
■■ Vendor risk management must mature.
These practices may have been extremely difficult to implement in the past.
With purple teaming, however, they are achievable because with skilled and
engaged internal purple teams, CISOs have the human and intellectual resources
required to create and deploy effective security policies and cultures throughout
a company.
Purple teams are better able to minimize human error throughout the company
by proactively setting and communicating security policies, ensuring that
employees are aware and engaged with the security practice. They can help
to ensure that everyone in the company, from the reception staff to the CEO,
knows how to implement security process, from understanding social engineering
and phishing to alertness over suspicious links. This way, the entire company
becomes an extension of the purple team.
SOCIAL ENGINEERING
Social engineering can be thought of as hacking the human brain, often with the
intention of gaining access to computer systems (at least in the context in which we are
interested). Social engineering considers human psychology in order to manipulate
Chapter 1 ■ Hacking a Business Case 11
people into performing some action or giving up some vital piece of information. An
example of this would be calling an employee at their workplace, claiming to be a
member of the IT department, and asking them to browse to a website (a malicious
site under your control) to fix a problem that you have detected. The site would be
used to run malicious code on the victim’s computer, allowing access to sensitive data.
Practically speaking, policies may include data protection plans (appointing
a data protection officer is an essential part of that), emergency procedures (so
that everyone knows, and is trained on, what to do if there is a breach, such as
backing up data and auto updates), and user awareness.
Getting the board to commit is also easier once security becomes part of the
company culture. In fact, high board engagement in information security is a
significant factor in creating that culture. Again, we can refer to Protiviti’s IT
security survey, which shows that high board engagement results in management
having a far better understanding of the company’s “crown jewels” (data), better
data classification policies, and better communication with employees about
what exactly a company’s data is and how to treat it.
But how do you get the board engaged? First, you shouldn’t use scare tactics.
What you really need to do is get people to feel good about and value their data.
A suggestion for helping this to happen is to adapt the language that we use
around infosec. For example, boards are happy, familiar with, and expect to
discuss financial risk, market risk, liquidity risk, and so on. So, let’s put cybersecurity
in their language, renaming it as data risk or informational risk. (When this
happens, the message tends to hit home.) You also need to find ways of making
data-risk reports less technical so that everyone can understand the content.
This is important, as 54 percent of boards say that cybersecurity reports are too
technical (Bay Dynamics Osterman Research, 2016).1
Summary
All computers are broken. There is no such thing as a completely secure system.
Organizations large and small are attacked on a regular basis, often resulting in
the theft of huge chunks of customer data. The situation does not appear to be
improving, and with a steady influx of new (often Internet-connected) devices
and software applications, an understanding of information security is more
important than ever.
To protect our data, we need to understand its value and proactively work
to prevent its theft or extortion. Combining the expertise of attackers and
defenders, understanding the approaches used by bad actors, and promoting
a better security culture are ways in which we can protect ourselves, our organizations,
and our data.
12 Chapter 1 ■ Hacking a Business Case
Whether you are working alone for a client or within a team that has adopted,
or is currently adopting, the purple team mentality, you will find the contents
of this book invaluable. Perhaps you are just starting out in infosec, or perhaps
you are a seasoned IT professional seeking to bolster your skillset. This book
was written for you.
We will examine the facets of a typical organization’s infrastructure—the
technologies that almost all of us rely on today—that are often misunderstood
when it comes to security. First, we’ll cover some important legal and ethical
considerations in Chapter 2, “Hacking Ethically and Legally.” Then, in Chapter 3,
“Building Your Hack Box,” we provide technical demonstrations that show you
how to configure your own system for ethical hacking or penetration testing. In
the following chapters, we cover numerous hacking techniques, examine highprofile
vulnerabilities, and explain important hacking tools. In the penultimate
chapter, we take a look at passwords and how they can be extracted from files
that you’ve recovered during your adventures. Finally, we’ll show you how to put
your findings into a report that can be given to a client or senior staff member,
explaining the issues you’ve found and how to address them.
Notes
1. See www.hackerhousebook.com/.docs/how-board-of-directors-feelabout-
cyber-security-reports-1.pdf.
2
Unfortunately, the term hacker has negative connotations for many who automatically
attribute hacking to an illegal activity. Just like any professional
however— be it a doctor, lawyer, or teacher—the job title hacker is neutral; we
can have inept doctors, dishonest lawyers, and poor teachers, but we tend to
assume that these roles are inherently “good”.
The following definition from Wikipedia outlines the term “hacker” as it has
come to be understood in technical communities:
A computer hacker is any skilled computer expert who uses their
technical knowledge to overcome a problem. While hacker can refer to
any skilled computer programmer, the term has become associated in
popular culture with a security hacker, someone who, with their technical
knowledge, uses bugs or exploits to break into computer systems.
—Wikipedia, November 2018
Using bugs and exploits to break into computer systems is something you’ll
be doing a lot of in this book; breaking into computer systems is legal provided
you have written permission to do so from the owner of the system. Using your
skills and knowledge to gain unauthorized access—that is, access where you do
not have permission—is most likely illegal where you live. Breaking the law is
Hacking Ethically and Legally
14 Chapter 2 ■ Hacking Ethically and Legally
something that every ethical hacker and penetration tester needs to avoid. The
goal of this chapter is to give you some guidelines for avoiding this predicament
as well as a basic understanding of the legal, ethical, and moral obligations that
can be expected of you.
Laws That Affect Your Work
The law is complicated, and it varies (sometimes significantly) from country
to country. We cannot provide you with a complete one-size-fits-all solution,
and rather than try, we will instead outline some basic pointers. As we say
to students at the beginning of each Hands-on Hacking training course at
Hacker House (hacker.house), we are not made up of a team of lawyers, but
we do use lawyers when necessary. If you do need legal advice, you should
consult a suitably qualified professional. Before undertaking any work, you
should become familiar with the laws where you live. If you are living and
working in the United States, for example, you should be aware of several acts
and laws including:
■■ Computer Fraud & Abuse Act 1984
■■Digital Millennium Copyright Act 1998
■■ Electronic Communications Privacy Act 1986
■■ Trade secrets law
■■ Contract law
Each country has its own set of laws, some of which are similar to each other.
The U.K. acts are as follows:
■■ Computer Misuse Act 1990
■■Human Rights Act 1998
■■Data Protection Act 1998
■■Wireless Telegraphy Act 2006
■■ Police & Justice Act 2006
■■ Serious Crime Act 2015
■■Data Protection Act 2018
Chapter 2 ■ Hacking Ethically and Legally 15
Criminal Hacking
The penalties for illegal hacking attacks are often severe, so make sure you’re
aware of what is and isn’t legal before undertaking any work.
As an example of one such severe hacking penalty, take the case of Albert
Gonzalez, who on March 25, 2010, was sentenced to 20 years in federal prison
in the United States. Gonzalez stole a large amount of credit card information
(some 170 million numbers) from various sources. One of his earliest known
“hacks” was his unauthorized access to NASA at the age of 14.
In the case of Lauri Love, a British hacker sought by the United States for
extradition, he faced a possible 99 years in prison for his alleged role in an
Anonymous (an international hacktivist organization) protest about the unjust
treatment of Aaron Schwartz, who was an American entrepreneur and activist
who hanged himself not long after being prosecuted for multiple violations of
the Computer Fraud and Abuse Act in the United States. There are countless
examples of similar lengthy prison sentences handed out or attempted to be
handed out, especially in the United States.
Hacking Neighborly
Generally speaking, testing your own desktop or laptop computers is lawful.
This is not the case for equipment belonging to a third party, such as a smart
meter or set-top box, even if it resides in your home. If you’re testing computer
systems at your place of work, or a neighbor’s computer system, then you must
16 Chapter 2 ■ Hacking Ethically and Legally
obtain written permission from the system owner before starting any hacking
activity. Asking a colleague at work whom you believe to be responsible for
a particular system may not be enough, especially if it turns out they are not
responsible. Without proper, written permission, you’re almost guaranteed to
be in violation of some law.
You should also consider the implications of running tools while connected
to your Internet service provider (ISP). Do they allow such activity as part of
their user agreement?
Legally Gray
Scanning Internet-connected equipment using a tool like Nmap (a network
probing tool that we’ll be demonstrating throughout this book), while not
illegal, is frowned upon by some system owners. While you can scan the
Internet for common vulnerabilities (and there are services such as Shodan www
.shodan.io to do this for you), if you start scanning from your own machine,
you may receive complaints. This is especially likely if you start scanning the
U.S. Department of Defense, for instance. You may get some emails indicating
that your behavior is not welcome or a follow-up from your ISP alerting you to
this nonpermissible behavior.
Caution should be exercised when it comes to scanning systems without permission.
Imagine if by scanning a system you inadvertently caused some problem—a
side effect such as a denial-of-service condition (preventing access by other legitimate
users to the service). Whether or not this is intended may not be relevant in the
eyes of the law and could land you in trouble. You also have to be careful of intent;
that is, what reason do you have for scanning government computer systems?
Using default passwords or accessing services without permission—even if
they are unprotected—is another gray area. There is an argument for accessing
systems that do not have any real security features: If it is possible for a resource
to be accessed by the public, is it not therefore a publicly available resource and
thus authorization is implied? An example of this is a website containing documents
whereby a URL parameter can be altered to view different documents. For
example, you might change govsite.gov/?docid=1 to govsite.gov/?docid=500 in
your web browser’s address bar. The website might show you a new document
when you make this change, but do you really have the authority to view it?
Such websites may contain sensitive information that was not intended to be
made public but that was left exposed, perhaps by an inexperienced employee
who was simply unaware of any problem. It is advised that you steer clear of
such situations and those where default passwords allow access to resources.
In 2005, a security consultant named Daniel Cuthbert was convicted under the
United Kingdom’s Computer Misuse Act for changing a URL parameter on a
Chapter 2 ■ Hacking Ethically and Legally 17
donations page that was set up for victims of a tsunami. He did not have permission
for this, making his actions illegal. Cuthbert was fined by the court and
dismissed by his employer despite wide criticism by IT security professionals.
WARNING Always get written permission from the system, network, or environment
owner when you are planning a test and ideally when you intend to perform
scanning activities. It will save you a lot of trouble and stress later.
Penetration Testing Methodologies
When you engage with a client as a penetration tester or hacker-for-hire, you
should adhere to a set of methodologies. Many open standards, guidelines, and
frameworks have emerged over the years including the following:
■■ Information Systems Security Assessment Framework
■■ Penetration Testing Execution Standard (PTES)
■■ Penetration Testing Guidance (part of the Payment Card Industry Data
Security Standard)
■■Open Source Security Testing Methodology Manual (OSSTMM)
■■ The Open Web Application Security Project (OWASP) Testing Framework
■■MITRE Adversarial Tactics, Techniques, and Common Knowledge
(ATT&CK)
Methodologies help you to move through a number of tasks in a systematic
manner, ensuring that nothing is missed. They may also help you to comply with
legislation and industry best practices. Hacker House recommends checking
out the Penetration Testing Execution Standard, which can be found at www
.pentest-standard.org/index.php/Main_Page. The PTES covers a lot, from how
to engage with clients in the first place through issuing a final report. It provides
overall guidance on how to conduct a penetration test, and it includes details
on how to execute a number of tasks.
The Open Source Security Testing Methodology Manual is also full of useful
information, and it can be obtained from www.isecom.org. Version 3 of this manual
is a little dated, as it refers to technologies like private branch exchange (PBX),
voice mailboxes, fax, and Integrated Services Digital Network (ISDN). Nonetheless,
it’s useful if you come across one of these legacy technologies for the first time.
This book borrows elements from various methodologies, and it incorporates
extensive personal experience to bring you a guide on hacking and conducting
penetration tests, which can be thought of as being like a methodology. However,
the book seeks to be more accessible and entertaining than one of the previous
18 Chapter 2 ■ Hacking Ethically and Legally
examples. We will be focusing on certain tools, technologies, and exploits, which
generally isn’t a feature of these methodologies. At some point, you may want to
delve further into a particular area, such as web application hacking, in which
case finding further resources that specialize in this area is recommended. At
some point, you may end up writing your own methodology because nothing
suitable exists for the particular area in which you are working! The testing
techniques and strategies in this book often follow the same common steps
outlined in such methodologies.
When approaching a system or technology for our hacking purposes, we
abide by the following logical process steps:
1. Reconnaissance
2. Passive and active probes
3. Enumeration
4. Vulnerability analysis
5. Exploitation
6. Cleanup
Authorization
If you’re undertaking a penetration test for a client, it is imperative that you
have written permission to carry out the activities you need to do in order to
complete the test. During testing, you may be able to gain access to an area
containing sensitive data, such as personally identifiable information (PII).
Your client needs to understand and authorize this. Even if you have agreed
to test systems with a client and have authority to conduct certain activities on
certain systems, finding a vulnerability and using it to gain access to a system
to which the client has not agreed would mean you’re breaking the law.
Even though you’re working for a client who is paying you for a service, you
need to protect yourself from any potential legal repercussions. It is also beneficial
to set out everything clearly and in certain terms for the client’s benefit. This
is achieved with an authorization for testing contract (usually a form) that both the
tester and the client agree upon and sign. This should clearly state that they will
not seek to prosecute you under the Computer Misuse Act (and/or any other relevant
laws). This form will reference the scope that has been agreed to with your
client. The scope will list all the systems that are to be tested, usually containing
a list of Internet Protocol (IP) addresses. Sometimes domain names will also be
given. Any areas that are off-limits should also be outlined in this document.
Even with a disclaimer in place, it is best to consult with your client before
running any exploits that might cause harm. Ideally, you will be testing a
development or staging environment. Even so, transparency is key. If you find
Chapter 2 ■ Hacking Ethically and Legally 19
a vulnerability that when exploited could take entire systems offline, this is
something you want to check on first with your client to ensure that it is appropriate
for you to test. When conducting a dangerous activity such as exploiting
a remote vulnerability that could cause impact on a system, it’s important to
let the system owner know. Clear communication and transparency are key to
avoiding misunderstandings that cause complications with your clients.
Always remember that you’re a guest in the client’s computer environment,
and it’s in your interest to be invited back in the future!
Responsible Disclosure
Responsible disclosure is the practice of first informing and then working with
product vendors to resolve a vulnerability. It is a process to protect consumers
or users of the software or product and, eventually (or as a last resort), potentially
publish information on such a vulnerability.
Consider this situation: You’re working on a penetration test for a client,
and you find some new way to access sensitive information that should not
be possible. This bug, flaw, or vulnerability doesn’t just affect your client, but
any user of that particular piece of software. During your testing, you find a
way to exploit the weakness that you’ve found and conduct some research,
ultimately determining that it is an undocumented vulnerability and that there
is no information on exploiting it. Congratulations, you’ve found a zero-day vulnerability
that puts regular users at risk, which should be fixed by the software
vendor. A zero-day vulnerability is a flaw that is not yet patched by a vendor
and may not be widely known beyond the discoverer. What do you do next?
First, as you are working for a client, they should be informed of the problem
immediately. Measures should always be taken to secure communications when
discussing sensitive matters. Use email encrypted with OpenPGP. PGP stands
for Pretty Good Privacy, and it is considered an appropriate security practice (see
www.openpgp.org). You and the client may agree that they will contact the software
vendor with details of the bug found so that (ideally) work can be started
on a patch as soon as possible. In the event that your client does not want to
disclose the vulnerability, as a security professional you should advise them on
the ramifications to other companies using the software. However, ultimately
your responsibility is to report the vulnerability to your client. If your client
does not want this information disclosed to a third party (such as a vendor),
then you should respect their wishes.
You may have found the flaw while hacking around with one of your own
computer systems, in which case you should contact the vendor directly. Industry
de facto guidelines suggest that a 90-day window of opportunity should be given
to allow the vendor to prepare a patch. You’re effectively giving the vendor 90
days to implement some kind of fix for the bug or flaw you found. After this
20 Chapter 2 ■ Hacking Ethically and Legally
time, if no patch has been prepared, and depending on the nature of the flaw, it
is often considered responsible to alert the normal, everyday users of the affected
software to the problem. Up until this point, nobody else should know about the
bug other than you (and your client, if you’re working with one) and the vendor.
Software vendors should not be “held to ransom” or forced into a difficult
situation under this responsible disclosure practice; however, as history has
shown, some vendors will do nothing until the problem is made public. Some
vendors may not want to work with you on fixing the problem or may refuse to
acknowledge the problem exists at all. These vendors will almost certainly be
aggrieved when you go public, but as long as you’re following industry best practice,
you don’t really have anything to worry about. By doing this, you’re forcing
the vendor to acknowledge the problem where otherwise they were content to
ignore it. Ultimately, you’re helping to protect consumers, as the vendor will now
be forced to make a fix or risk losing customers. As hackers, we have a moral
obligation to inform the public and affected parties in such situations. However,
you should always consider the risk of going public versus not doing so.
NOTE One of the authors of this book disclosed flaws in WinZip, which came
to be leveraged by financially driven criminals seeking to profit from insecure systems.
Exploits for the vulnerability were found in MPack (a malware kit produced by
Russian crackers) soon after the issue was disclosed. MPack is referred to as crimeware
because it is designed to be used by criminals. It was sold for $500–$1,000 per
download. Had the author realized such implications at the time, he would most likely
have kept the information under wraps longer, to prevent its misuse.
Once the vendor has developed a patch (or fix) for the product, a further 30
days should be allowed before disclosure in order to allow affected customers
to obtain and apply the patch. There are no laws that state this is the case, but
it has generally become the accepted de facto vulnerability disclosure timeline
to which most hackers adhere.
When disclosing weaknesses to vendors, you may find that some are hostile
while others are open and engaging. It has become common practice for
vendors to reward public-spirited disclosures by adding your name to their
hall of fame (for example, see www.mozilla.org/en-US/security/bug-bounty/hall-
of-fame), perhaps even sending a token gesture or monetary reward for
your efforts. However, such rewards should not be expected and are more often
the exception, not the norm.
Bug Bounty Programs
One approach that some companies or organizations take to improving their
information security is to open their applications or products to testing from
Chapter 2 ■ Hacking Ethically and Legally 21
the public. These arrangements are known as bug bounty programs. Two
well-known bug bounty platforms are: www.bugcrowd.com and www.hackerone
.com.
In a sanctioned bug bounty program, anyone is allowed to carry out certain
activities against designated systems and services; the idea is that when a vulnerability
or bug is found, it is reported to the company. In return, the finder of
the bug is given a monetary reward—a bounty, so to speak—and the company is
able to patch the hole in its defenses, rather than having it exploited maliciously.
This is great for hackers and anyone new to this industry, as it gives you
viable commercial experience for effectively carrying out a penetration test and
reporting any issues that you find in a way that means a company can re-create
the bug and ultimately fix or patch it.
Many hackers undertake bug hunting not only for the bounties but for the fun
and thrill of the hunt! It is also a fantastic way to build up experience, and it is a
good talking point in any security job interview. Just make sure you’re operating
under a legitimate program and staying within the scope of the project at all times.
Legal Advice and Support
Cybercrime lawyers are expensive—really expensive. Of course, this depends on
the type of advice required and the particular country or legal system. You’ll no
doubt avoid engaging with a lawyer as much as possible for this reason, but if
you do find yourself in trouble, you’ll need to make sure that you get someone
who is well-versed in cyber law. There are often miscarriages of justice in this
space because of a lack of understanding by nonspecialist lawyers. The authors
of this book are not lawyers, and we do not recommend following our advice
in place of sound legal advice.
Fortunately, there are organizations that look out for the “little person.” One
such organization is the Electronic Frontier Foundation (EFF), which has helped
individuals and small companies defend themselves in cases against huge corporations.
Take, for example, the case where 28 of the world’s largest entertainment
companies, led by MGM Studios, attempted to sue distributors of peer-to-peer
file-sharing software, blaming them for piracy of copyrighted works. Another
example is when the EFF held Sony BMG accountable for infecting customers’
computers with a type of malware that could spy on the user’s listening habits.
The EFF can be found at www.eff.org, and it may be able to offer legal support
or refer you to one of its trusted attorneys. The organization also has a Coders’
Rights project (www.eff.org/issues/coders) that addresses a number of common
legal issues that reverse-engineers, hackers, and security researchers in the
United States may face. The EFF is an American organization, but there is a
similar European association, European Digital Rights (edri.org), that exists in
several countries in Europe.
22 Chapter 2 ■ Hacking Ethically and Legally
These organizations can’t help you in day-to-day legal matters. Contacting a
local trusted professional is always best. Nevertheless, such organizations can
most certainly recommend experts to contact. If you are unfortunate enough
to be arrested or you experience legal complications because of your ethical
hacking activities, seek professional legal advice immediately.
Hacker House Code of Conduct
When students attend our Hands-on Hacking training course, the first
thing we ask is that they agree to and sign our Hacker House Code of Conduct.
While we cannot force this upon you as a reader of this book, we do hope that
you take what you learn from it and apply it legally, morally, and ethically.
Throughout this book, we will be probing for weaknesses and vulnerabilities
and exploiting them—just as you would in the real world. The approaches and
techniques covered could be used to commit criminal acts—in the same way
that a book on accounting could help a rogue accountant commit money laundering
offenses or a book on medicine could be used by an unethical doctor to
harm patients. It is our hope that you will use the tools and techniques in this
book to contribute proactively to information security and to defend systems
more effectively from those who would do them harm.
Summary
Here are the key points to remember as you set off on your hacking journey:
■■Always get written permission from the system owner before attempting
any hacking.
■■Agree to a well-defined scope when working with a client. What is and
isn’t allowed? What systems will be tested?
■■Have your client sign an authorization for testing contract that refers to
the scope and negates your liability if things go wrong.
■■Always remain within the project’s scope.
■■ Be open and transparent from the outset to avoid complications that
may arise.
■■ Seek professional legal help when required. This is highly recommended
for creating your own authorization for testing contract.
■■ Follow responsible disclosure best practices where relevant.
Have fun and enjoy hacking!
CHAPTER
23
3
This chapter will introduce you to the concept of virtual machines (VMs) and
how they are useful to you as a “practice ground” or sandbox in which to try
tools and techniques. We will also show you one way in which you might configure
your host system, that is, the physical machine and operating system
within which your virtual machines (guests) will run.
There are countless ways in which you might set up a system, and a lot comes
down to personal preference. With that in mind, we will provide an overview
of setting up a system (something with which you may already be comfortable)
before delving into the details of configuring virtual machines for the purpose
of hacking. We will go over some hardware considerations, but again there are
many options and opinions here.
Something about which you must be aware is your own information security
and cyber hygiene. We will therefore provide some pointers on protecting your
system from bad actors. This is particularly important if you intend to use such
a system for testing your client’s network, since your system may contain data
belonging to them and potentially detailed information on security flaws! Virtual
machines come in handy here too, as they can be used to segregate information
from the rest of your system.
We will first discuss hardware, before moving on to installing an operating
system. We will then install VirtualBox—a free, open source hypervisor—for
creating and managing virtual machines.
Building Your Hack Box
24 Chapter 3 ■ Building Your Hack Box
Hardware for Hacking
You will now explore some different options for hardware that you might consider
if you’re thinking about buying or setting up a computer for the purpose of
hacking. It is likely that your existing computer is sufficient for making the most
of this book, and that is because the hardware requirements for many hacking
activities are not demanding. You could perform an entire penetration test from
a Raspberry Pi if you were so inclined, although it would not be recommended.
Contrast that to PC gaming, where you need a high-end graphics card, lots of
memory, and a high-end CPU to play the latest titles. You certainly don’t need
this type of hardware to exploit the latest vulnerabilities.
NOTE Smartphones, tablets, Chromebooks, and single-board computers (SBCs) (the
Raspberry Pi, for example) are not suitable for carrying out many of the activities in
this chapter. Such devices generally use an ARM processor (ARM originally stood for
Acorn RISC Machine; now it stands for Advanced RISC Machine), which is a CPU that
may not have the full virtualization functionality of the Intel or AMD CPUs commonly
found in desktop and laptop machines. This does not mean that these devices cannot
be used for hacking. In fact, you will often find that these devices lend themselves well
to such activity. However, they just can’t cut it for running VirtualBox, our hypervisor of
choice. ARM CPUs have a reduced instruction set, which is why Reduced Instruction Set
Computer (RISC) can be found within the ARM acronym. A RISC processor has a smaller
set of general-purpose instructions compared to a Complex Instruction Set Computer
(CISC) processor, such as a modern Intel or AMD CPU. It is within the advanced
instruction sets of CISC CPUs that virtualization-specific instructions are found.
The key consideration regarding your hardware is whether it can handle
virtual machines. We use VirtualBox throughout this book, so we are basing
our requirements on the assumption that you’ll use it as well. There are other
hypervisors, such as VMware (https://www.vmware.com) and Hyper-V (available
on certain versions of Windows), but these often lack many of the features
provided by VirtualBox unless you’ve paid a premium.
As a guideline, the following specification should be enough to complete the
exercises in this book, regardless of whether you are running Linux, BSD, Windows,
or macOS as your host operating system (OS). These are the minimum
requirements for the activities presented in this book, assuming that nothing
is currently installed:
■■A modern AMD or Intel CPU with Streaming SIMD Extensions 2 (SSE2).
Single Instruction, Multiple Data (SIMD) is an Intel instruction set that is
required to run VirtualBox.
■■ 4 GB of RAM.
Chapter 3 ■ Building Your Hack Box 25
■■ 50–100 GB of hard-disk drive (HDD) or solid-state drive (SSD) capacity.
■■ Internet access for downloading software and running certain
demonstrations.
Almost all modern processors, such as those offered by Intel and AMD, allow
full virtualization. You can usually check this in your computer’s Basic Input
Output System (BIOS) or Unified Extensible Firmware Interface (UEFI) settings.
Having multiple CPU cores will come in handy when it comes to running VMs.
When configuring a VM, you can tell it how many cores it is allowed to use. Two
physical cores are usually enough, and four is overkill for the examples in this book.
The next thing to consider is the amount of memory in your computer. The
more memory the better, since you will be dedicating a chunk of RAM to running
virtual machines. Although 4 GB of RAM will be enough to run your host
operating system, a Kali Linux virtual machine, and a vulnerable virtual server
(for hacking into), if there is one place where it’s worth expanding capacity, it is
here. This is because when you run virtual machines, you actually hand over a
chunk of the computer’s memory to the VM for its exclusive use. With 4 GB of
RAM, depending on your host OS, you might have 1.5 GB used by Windows,
1.5 GB used by Kali Linux, and 1 GB dedicated to a virtual server. This doesn’t
leave much room for anything else to run, and you may notice that operations
take a while to complete.
Hard drive capacity is also important. Your host OS, for example, may take up
around 20 GB without any additional software installed. A Kali Linux virtual
machine will need to be at least this size as well, since it is an entire OS in its
own right. Additional VMs will need their own hard-disk space. Fortunately,
storage today is cheap.
We have not mentioned graphics since none of the tools that we will be
using needs much graphical processing power. A lot of what you’ll be doing
will be command-line based, but there will be some GUI tools used as well.
If your machine can run a web browser and stream videos, it will be suitable
for performing the exercises in this book. There is one area where a powerful
graphics cards can come in handy, however, and that is when it comes to cracking
password hashes. This action (cracking of hashes) can be considered a different
type of activity altogether as compared to the hacking that we will be focusing
on in the majority of this book. You will take a look at passwords and cracking
in Chapter 14, “Passwords.”
NOTE You should check to see whether your hardware, in particular your CPU,
supports full virtualization. Modern processors, such as those manufactured by Intel
and AMD, have different names for features that allow virtualization, such as Intel VT-x
or AMD-V, respectively. There should be an option in your computer’s BIOS or UEFI
settings to enable these; they are often disabled by default on Windows machines.
Modern macOS systems have virtualization enabled by default.
26 Chapter 3 ■ Building Your Hack Box
If you decide to get serious about hacking and start working professionally,
then it will be worth investing in a more powerful system. Our recommended
system requirements for doing more demanding work are as follows:
■■A modern Intel or AMD CPU with four or more physical cores
■■ 32 GB of RAM
■■ 1 TB of storage capacity
■■ Both wired and wireless network interfaces
■■High-speed Internet access
We haven’t mentioned keyboards, but since you’ll be spending a lot of time
typing commands and writing reports, a comfortable keyboard is recommended.
There is much to be said about keyboard preference, and they are as diverse as
the choices of laptops. A good mechanical keyboard might be your preference,
but its click-clack noise will most certainly frustrate your work colleagues.
NOTE At some point, you may wish to explore the Happy Hacking Keyboard (HHK),
which uses a minimal 60-key design and is optimized for human interaction with Unix
systems. The idea for such a device was championed by Japanese computer scientist
Eiiti Wada, who was dissatisfied with the layout of keys and general design of computer
keyboards for programming. HHKs are great for hacking, but not so great for report
writing. You can find out more, and purchase the latest model at hhkeyboard.com.
You’ll also want to make sure that you have an Ethernet port, as some newer,
lightweight devices are doing away with this feature. An alternative is to use
an external Ethernet adapter that plugs into any available USB port.
Linux or BSD?
You will soon realize that the authors of this book make extensive use of Linux.
Linux lends itself particularly well to hacking, not the least of which is because
so much of the Internet runs on this operating system. Moreover, a great number
of security tools have been written specifically for Linux. Although you can
compile many of these tools on platforms like OpenBSD and macOS, they often
will not function as expected, or at all as compared to Linux.
The majority of exercises and examples in this book use Linux. You’ll probably
get far more enjoyment from them if you surrender now and start using Linux as
your daily OS. Doing so is a great and recommended way to learn Linux. However,
if you’re using Microsoft Windows or macOS, you do not need to abandon them.
You can run a virtual machine inside your existing operating system. That virtual
Chapter 3 ■ Building Your Hack Box 27
machine can be installed with Linux, and you can keep all of the benefits of
your current OS while learning Linux at the same time.
If you have already decided that this is the route you will take, then you
might want to skip ahead to the section “Essential Software.” This also goes for
those who are already sold on Linux and have a distribution (or distro for short)
running, with which you are perfectly content.
An alternative distribution choice is the Berkley Software Distribution (BSD),
or rather a descendant of it, such as NetBSD, OpenBSD, and FreeBSD. Although
these OSs are based on UNIX and not Linux, they adopt many of Linux’s design
choices.
The main differences among Linux distributions often come down to choices
in the package management software and frequency of security updates.
NOTE For training purposes, as well as carrying out the activities in this book,
using a distro’s packages are perfectly acceptable, but when it comes to testing a client’s
system, it is advised that you check the source code of tools and programs and
build those tools from source wherever possible so that you’re running only the tools
you’ve either audited or built yourself. If a tool that you’re using damages a client’s
system and you’re not fully aware of what that tool is actually doing, you may be liable
for the damage.
Host Operating Systems
Your host operating system is the one that will be installed on your physical
machine. We’ve already mentioned that Linux is almost certainly the best route
to go for security testing. The question then becomes, which Linux distribution
should you use? Popular distributions for security-focused work include Arch
Linux and Debian as host operating systems. Linux zealots may tell you to use
Gentoo Linux. A lot of users new to Linux opt for Ubuntu (which is based on
Debian). Let’s look at some of the differences among popular Linux distributions
to help you decide. These aren’t the only Linux distributions available, and many
others exist that you may want to explore, such as Mint.
Gentoo Linux
Gentoo Linux offers you full customization, and it can be built entirely from
the ground up using no binary components if that is what is required. From
a security perspective, it allows you to review precisely what your computer
has been instructed to do in source code form. If you want to live life on the
bleeding edge of Linux, then Gentoo is certainly the right choice, as changes
made to upstream components are available almost instantly.
28 Chapter 3 ■ Building Your Hack Box
While Gentoo is certainly an admirable OS choice, it can be daunting and
unnecessarily complicated for a new user. It is recommended that you try it
once to become intimately familiar with the various OS components. However,
unless you want to spend the majority of your time compiling source code, we
do not recommend that you use this as a daily desktop system. Programming
aficionados and Linux nerds may disagree with that statement, as it is often
viewed as a mark of technical purity to run such a capable system.
Arch Linux
Arch Linux is an excellent blend of power distribution and binary components.
It could be considered a hybrid of Gentoo-like power and Debian-like stability,
offering the speed and efficiency of a binary distribution while still allowing
flexibility with source code components. It is not targeted for novice use, yet
installing and using it will certainly teach you a lot. The installation process is
not like installing a mainstream OS, such as Windows 10, macOS, or Ubuntu.
To install Arch Linux successfully, you will need to be proficient with the Linux
command line and have an understanding of how Linux works under the hood
already. The advantages of this distro are that it is highly customizable and that
you will have a good idea of exactly what software is running on it. We cannot
recommend Arch Linux for beginners, yet it’s certainly something to try, perhaps
in a VM, once you have VirtualBox up and running.
Debian
Debian is a stable Linux binary distribution that takes care of most of the installation
steps for you. By default, the most recent versions do not supply any
proprietary software, firmware, or drivers for your hardware. This means that
your computer might not run exactly as it would with Windows or macOS
installed without some manual configuration. This configuration is certainly
not as involved as with Arch Linux or Gentoo Linux, but it could leave some
Linux newcomers a little put off or frustrated. Kali Linux, which you will install
to a VM later, is based on Debian, as is Ubuntu. This gives you an idea of how
stable Debian is. It provides precompiled packages in binary form to provide
fast security updates with a wide range of flexibility. It also means that the OS
is not particularly customized to your hardware, and you may not be getting
all of the advantages from your system that a distribution like Gentoo offers.
Ubuntu
Ubuntu (based on Debian) is often the choice for beginners because it eases the
user into the world of Linux. Its installation process is straightforward, and it is
driven by graphical prompts. The default user interface is easy to navigate and not
Chapter 3 ■ Building Your Hack Box 29
dissimilar to macOS. One of the big advantages of this distro is that it is likely to be
highly compatible on whatever system you install it, as it allows for easy installation
of proprietary firmware and drivers. In practice, this means that your sound card,
graphics card, webcam, Wi-Fi network adapter, and so on, will probably function
as expected (which is not always true for other distros). Contrast this to Debian,
which by default does not include any proprietary software and requires some
tweaking to get devices working. If you are new to Linux, then Ubuntu might be
the best way to go. It’s well documented online with lots of help pages and tutorials.
It is highly likely to install easily and work the first time on your hardware.
Kali Linux
We recommend that you install Kali Linux (also based on Debian) inside a virtual
machine, but not as your host operating system. Sure, it will work as a host, but
this is not the purpose for which it was designed. We will show you how to
install Kali Linux inside a VM later in this chapter. Kali Linux, at the time of
this writing, is a popular choice for a ready-made pentesting toolkit. Pentesting,
or penetration testing, is the process of identifying all of the security flaws in a
client’s system. By the time you finish this book, you’ll understand this process
far more clearly. Kali Linux contains a large number of tools for this purpose.
It can also be run as a live image, which means you can copy the OS to a USB
stick, or some other bootable medium, and run the OS without making any
changes to the computer’s HDD or SSD. This Linux distribution will be referred
to throughout the book, and it will be your pentesting or hacking machine. It
comes preinstalled with an array of security tools, many of which we will demonstrate.
You may also want to try alternatives to Kali Linux, such as Black-Arch
Linux or Pentoo Linux, which use Arch Linux and Gentoo, respectively, as a base
distribution. Kali Linux is the most widely used security distribution for hacking,
but the previously mentioned alternatives are equally well-suited to this purpose.
RUNNING A MAINSTREAM OS
While running Linux as your host OS has direct advantages for the ethical hacker, you
may want to run a more mainstream OS such as Windows or macOS as well. You can
do this using a VM. The reason why you might want to is because Linux is notoriously
difficult to use for desktop publishing and document-sharing purposes, although
cloud-based solutions like Office 365 are making this less of an issue.
Verifying Downloads
Any file that you manually download from the Web, whether it be a new operating
system or a program, should be verified. You should verify the integrity of the
30 Chapter 3 ■ Building Your Hack Box
download; in other words, check that the file is valid and that it hasn’t been tampered
with (or corrupted) in some way before reaching you. You should always
do this, whether you download from a website or use a BitTorrent client. You will
often find detailed instructions for verifying downloads on a particular Linux distro’s
website. Here we will show you one simple way to verify downloads on both
Linux and Windows. Users running macOS also have a BSD subsystem (derived
from Mach, a kernel developed at Carnegie Mellon University, but that is another
book entirely), which can be used to make use of many open source components
using Homebrew (brew.sh) or MacPorts (www.macports.org).
First, you should download (or view) the hash or checksum for the file that
you have just downloaded. Be sure to download the correct hash, and make
sure it is downloaded over Hypertext Transfer Protocol Secure (HTTPS) or
some other secure protocol to prevent tampering. You may also find it easier to
simply click the file and view it in your browser before copying it to a text file.
You may see options for an MD5 hash, SHA256 hash, and SHA512 hash. MD5
shouldn’t be used, as collisions have been found in this particular algorithm that
make it unsuitable for use in a security context. Hashing and collisions will be
explored in Chapter 14. Once you have a copy of the site’s file hash, you will
need to generate your own file hash from the file you have just downloaded in
order to compare it. If both your generated file hash and the downloaded file
hash match, you can be confident that the two files are the same (though there
may be further signature checking that you could carry out using OpenPGP)
and that no one has tampered with the file. Make sure that the download is
complete, and then enter the following command on a Linux machine:
sha256sum <PathToFile> > mychecksum.txt
On macOS or BSD-based systems, the command is just sha256. Windows 10
contains a program called CertUtil, which can be run from the Windows command
prompt (search for cmd in the Windows search bar at the bottom left of the
screen). One of the functions that this utility can carry out is to generate hashes.
To do this, run the following command and copy the hash that is output to a
text file; for example:
certutil -hashfile <PathToFile> SHA256
You now have the downloaded file and two integrity file hashes: one from
the site and one you created yourself. Simply compare the two hashes (each of
which should have a single line in it—the hash) to see whether they match. On
a Linux machine, you can use the diff command:
diff mychecksum.txt sitechecksum.txt
Strangely, if the two files are identical (and thus the two hashes match), there
will be no output from this command. A visual comparison with the naked eye
is also usually sufficient to identify that hashes are matching.
Chapter 3 ■ Building Your Hack Box 31
WARNING If you have followed all of the integrity checking steps perfectly but
you still find that the two checksums are not identical, then you should not use the
downloaded file. This is unlikely, and you may want to perform some sanity checks
before concluding that you are “under attack.” Check the following:
■■ Does one of the checksums include an additional character or characters at the end; for
example, a single asterisk (*) or the name of the file?
■■ Make sure that the checksum on the site is for the correct corresponding file and that
you didn’t use a different one.
■■ Confirm that your download finished to completion and that your generated checksum
reflects the complete file by reviewing the size.
If after trying the preceding steps and checks and the two checksums are still not
identical, then you can conclude one of the following:
■■ Your file was intercepted and tampered with.
■■ The file on the site was tampered with or replaced. (This could have been done legitimately
and the checksum not updated.)
■■ A problem occurred during the download, and the file was accidently corrupted. Whatever
the reason, you should attempt the download the file again.
HTTP VS. HTTPS FOR DOWNLOADS
Files downloaded, or pages viewed over Hypertext Transfer Protocol (HTTP), are sent
from the web server as plaintext; in other words, they are not encrypted and can be
viewed by anyone who is suitably positioned to intercept the traffic. HTTPS, on the
other hand, encrypts communications, making it more difficult to view traffic once it
has been intercepted.
Sites may use HTTP for downloads and then encourage users to check that the file
wasn’t intercepted after the download is complete. This is worthless if they then provide
the file hash over HTTP, as this could be intercepted as well. To combat this risk,
some software developers will add file signatures for you to use for certificate validation
and to ensure that such a download has not been compromised. OpenPGP is
often used for this purpose, and it can validate that a file has not been tampered with,
providing that you have a corresponding public key. You will find details about using
OpenPGP for this purpose on many Linux distro websites.
Disk Encryption
If you are going to be using your hacking machine not only for hacking practice
but for working with clients and connecting to your client’s machines, then you
should ensure that you encrypt all of the data that is stored. If your computer
32 Chapter 3 ■ Building Your Hack Box
is stolen or if someone is able to gain physical access to your computer, it is best
practice that they find your HDDs or SSDs completely encrypted. This will make
data more difficult to recover than if everything is stored in plaintext.
You could set up individual encrypted folders and use these to store sensitive
information, but then you would be highlighting the fact that you have stored
secrets. It would be easy for someone who is able to access your machine to identify
these encrypted folders and then try to decrypt them. You may have even
mistyped the password somewhere and left it exposed on the rest of the drive.
The recommended action is to always encrypt your entire HDD or SDD. On
some operating systems, either it is not possible to encrypt an entire storage
device or it requires a fresh install. Windows 10 users will need to be running
the Professional version to use BitLocker, Microsoft’s proprietary encryption
software. macOS users should enable FileVault to protect their system. You will
find that it is difficult (if not impossible) to encrypt your drive completely. The
part of the device responsible for booting the operating system usually cannot
be encrypted since this must be read at system startup before the decryption
process is started. The easiest and most sensible way to enable disk encryption
is during the installation process for your OS (Debian and Ubuntu provide easy
options to do this). You can add further protection to certain files by adding
encrypted folders or encrypting individual virtual machines after installation
is complete.
You will decrypt your hard drive when the system boots using a strong passphrase.
Ideally, this will consist of a random sequence of alphanumeric characters
and symbols. If you need help choosing a strong passphrase, grab some
six-sided dice and open a web browser for www.diceware.com. There you will
find detailed instructions on how to use a dictionary as a pad (as in a one-
time
pad used by spies during the Cold War to encrypt messages) for creating passphrases
using the dice as a hardware random number generator. The most secure
passphrases should make use of your own pad and mix in additional characters
to increase complexity. A good passphrase created using this method would
look something like this: triedmagi!bluff&bash,firpyritec4nLucy. It should
not take too much effort to commit this passphrase to memory, yet it contains
37 characters, and is utterly meaningless. This makes it practically impossible
for a human to guess and, by current standards, extremely impractical for a
computer to arrive at this same password through trial and error.
You can also simultaneously use a key file with your passphrase—a seemingly
random file of data—or with a PGP keypair stored on removable media in
order to decrypt your device. It is ill-advised to use such files as the sole means
of accessing encrypted data, as they may become corrupt or can be easily stolen.
If you forget the passphrase or lose your key files, you’ll be unable to decrypt
your own device without spending a disproportionate amount of time and
energy (assuming that you used a suitably complex passphrase and the key file
was generated in a secure fashion).
Chapter 3 ■ Building Your Hack Box 33
Make sure you keep your passphrase and any key files safe and, ideally, backed
up. The passphrase you use to encrypt your hard drive should never be used
elsewhere. After you have securely generated it, you can write it down in a safe
place while you memorize it. However, once memorized, the hard copy should
be destroyed. Perhaps this sounds a little extreme, but by the time you’ve finished
reading this book, you’ll understand why such measures are important.
It is worth noting that, on more than one occasion, one of the authors of this
book lost important data by forgetting his passphrases to various systems. (It
had something to do with a brand of chocolate is all he remembers.) If you do
decide to make use of a secure and difficult-to-remember passphrase, it might be
worth your time to keep a copy locked away in a safe place—ideally out of reach
of would-be computer thieves. You should always take into account that you
may leave data encrypted for some time and eventually forget how to access it!
With the default settings for full disk encryption in Debian and Ubuntu, you
will see that the installer creates some partitions on your physical hard drive.
You will also see some virtual “crypt-devices.” The small EFI boot partition is
not encrypted, but everything else will be encrypted.
At some point during the install, you will be prompted to create a new user
(and at least password protect the root user). These can be thought of as the
Administrator accounts, and strong, unique passwords are important here too.
With these accounts and passwords, you will be able to install and remove software,
and you will have full access to any file on the system.
Following installation, you will be able to boot into your new OS. Entering two
passwords (encryption and then the user password) might be a little daunting
at first, but you’ll get used to it!
Essential Software
Once you have downloaded, verified, and installed a host operating system
(with full disk encryption enabled), you will need to install and configure some
additional software. We will review the software and tools that we consider
crucial at this stage for protecting your own system from attack. You can install
and manage software using your OS’s built-in Graphical User Interface (GUI) tool.
However, we advise you to use the command line, as doing so is a habit that
you’ll need to adopt if you’re to get the most from future chapters—and indeed
your hacking career! At this point, we’re assuming that you’re running a Debian
or Ubuntu distribution of Linux. If not, you probably know what you’re doing
and can convert the following commands. Before installing anything, verify
that your system is up-to-date using this command, which will check Debian
or Ubuntu’s online repositories:
sudo apt update
34 Chapter 3 ■ Building Your Hack Box
Sudo is short for super-user do, and it is required to carry out tasks that need
root permissions. The command will prompt you for your password and then
execute the next command, apt in this case, as though the root user was executing
the command. The apt program has been passed a single argument,
update. To find out more about apt, you should consult its man page using the
following command:
man apt
NOTE Ubuntu is different from other Linux distributions in that the root user
account is disabled by default. Other Linux and Unix flavors have a root user (called
the superuser in Unix), which can be thought of as an account with full access to every
file. The Windows equivalent would be the Administrator account. macOS (based on
Unix) also shields the user from the root user account. The sudo command is used
(not only by Ubuntu) to execute a single command with root permissions. A user must
be added to the “sudoers” list to use the command successfully. Under FreeBSD and
OpenBSD, the command doas works in a similar way.
After running apt update, you will find either that your system is already
up-to-date or that you can upgrade. Upgrading can be done with the sudo apt
upgrade command.
PACKAGE MANAGERS
Ubuntu and Debian use the Aptitude Package Manager (apt) for installing, managing,
and removing software. Package is the term used in Linux for software or computer
applications (apps). The package is synonymous with the app or application. When
you download something from Android’s Marketplace or Apple’s App Store, the same
underlying principles apply. Software downloaded and installed in this way is checked
for integrity by the package manager, apt in this case.
Firewall
Once you have updated your system, we recommended that you set up a firewall.
A tool called Un-complicated Firewall (or ufw, to give the command) provides a
fairly simple way to this. We assume that you are connected to the Internet via
a router and that this router is already providing you some protection from
trivial attacks. As you gain more confidence in this area, you will want to add
custom rules to your firewall, such as opening ports for payloads (more on this
later). For now, let’s look at some of the basics. You can see basic usage for the
Un-complicated Firewall tool with the sudo ufw help command. If it is not
installed, use sudo apt install ufw.
Chapter 3 ■ Building Your Hack Box 35
We recommend that you at least stop or deny all incoming traffic. You can
do this by entering the following command:
sudo ufw default deny incoming
You will then need to enable the firewall by entering this command:
sudo ufw enable
This should result in output like the following:
Firewall is active and enabled on system startup
You can check the status of your firewall using this command:
sudo ufw status verbose
You should then see the following output:
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), disabled (routed)
New profiles: skip
You could also deny all outgoing traffic with the command sudo ufw deny
outgoing, but doing so would stop you (or any programs that you run) from
connecting to your local area network and the Internet.
It is common practice to prevent outgoing traffic by default but then to allow
certain types of traffic to leave the system, for example, web and email traffic.
This is not something that we will delve into here, as it is not necessary to
continue. Once you have progressed further into this book, however, you will
pick up the skills and knowledge that will help you to do this. If you want to
understand how ufw works under the hood, read the IPtables man page (man
iptables), which controls the tables used for packet filtering on Linux. ufw is
essentially a wrapper around the more powerful IPtables functionality.
Password Manager
We recommend that you install a password manager and use it (or diceware) to
generate and store passwords that you use to access online services. Password
managers are built into most operating systems, such as Apple’s Keychain
Access, and even into some web browsers. A number of online solutions also
exist, such as 1Password (1password.com). We recommend a tool called KeePassX
(www.keepassx.org) for personal use. It is a password manager that can be
installed on Linux, BSD, macOS, or Windows. To install it under Debian or
Ubuntu, enter the following command:
sudo apt install keepassx
36 Chapter 3 ■ Building Your Hack Box
KeePassX is easy to use and graphically based, and it provides simple instructions
to organize passwords in a database. To begin, set up a new database and
use another unique, strong passphrase to protect it. You can then create new
items within KeePassX, each for storing an identity. You can store the username,
password, and other details if you want. You can also generate a random password
with a given length. KeePassX encrypts its files to protect the passwords
within them. There are tools to brute-force KeePassX files, and to prevent these
attacks, you can create a keyfile to protect your database further and store it on
removable media, such as a USB drive.
Email
Make sure you set up a means of sending and receiving encrypted email, especially
when communicating security-sensitive information such as vulnerability
reports. The most common way to do this is through the use of OpenPGP and
a plugin for your email client, such as Enigmail for Mozilla’s Thunderbird. You
may find that your client is not using OpenPGP and is unwilling to set it up,
in which case you will need to find an alternative method. One option with
which it’s a little easier for clients to get on board is Advanced Encryption
Standard (AES)–protected ZIP archives. (AES-256 is considered secure enough
at the time of writing.) These can be created and decrypted with a program
such as 7zip (www.7-zip.org), which is available on Windows and UNIX-like
OSs. Regardless of the email client, the encrypted file can be attached like
any other file attachment. The password to decrypt the archive should be sent
“out of band”; that is, through some communication method other than the
one used already (email in this case). This could be a telephone call, an SMS
message, or, better still, a message sent over a secure messaging application.
WARNING Do not use default ZIP encryption, as it is not sufficiently resilient
against modern attacks and offers little security benefit.